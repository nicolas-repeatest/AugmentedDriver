apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

group = "com.salesforceiq.augmenteddriver"
archivesBaseName = "augmenteddriver"
version = "1.8.1"

// To enable Steps and Arguments on AllureReport
tasks.withType(JavaExec) { jvmArgs "-javaagent:./allure/aspectjweaver.jar" }

artifacts {
    archives javadocJar, sourcesJar
}

dependencies {
    def withoutLog = {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
    }

    compile fileTree(dir: 'libs', include: '*.jar')
    
    compile 'com.google.guava:guava:19.0'
    compile 'com.google.inject.extensions:guice-assistedinject:4.0'
    compile 'org.seleniumhq.selenium:selenium-java:3.7.1'
    compile 'org.slf4j:slf4j-api:1.7.24'
    compile 'ch.qos.logback:logback-classic:1.2.1'
    compile 'junit:junit:4.12'
    compile 'com.beust:jcommander:1.48'
    compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.09'
    compile 'com.saucelabs:saucerest:1.0.35'
    compile 'io.appium:java-client:5.0.4'   
    compile 'org.apache.commons:commons-io:1.3.2'

    // For ALLURE
    compile 'org.aspectj:aspectjweaver:1.8.8'
    compile 'ru.yandex.qatools.allure:allure-junit-adaptor:1.4.20', withoutLog

    // For SLACK
    compile 'com.ullink.slack:simpleslackapi:0.6.0', withoutLog
}


jar {
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
    baseName = 'AugmentedDriver'
    version = '0.1'
}

task (runTest, dependsOn: 'classes', type: JavaExec) {
    main = "com.salesforceiq.augmenteddriver.runners.TestMethodRunner"
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("clazz") && project.hasProperty("capabilities")) {
        if (project.hasProperty("sauce")) {
            if (project.hasProperty("extra")) {
                args '-extra', extra, '-clazz', clazz, '-test', test, '-sauce', '-capabilities', capabilities, '-quantity', quantity, '-parallel', parallelTests
            } else {
                args '-clazz', clazz, '-test', test, '-sauce', '-capabilities', capabilities, '-quantity', quantity, '-parallel', parallelTests
            }
        } else {
            if (project.hasProperty("extra")) {
                args '-extra', extra, '-clazz', clazz, '-test', test, '-capabilities', capabilities, '-quantity', quantity, '-parallel', parallelTests
            } else {
                args '-clazz', clazz, '-test', test, '-capabilities', capabilities, '-quantity', quantity, '-parallel', parallelTests
            }
        }
    }
}

task (runSuite, dependsOn: 'classes', type: JavaExec) {
    main = "com.salesforceiq.augmenteddriver.runners.TestSuiteRunner"
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("suites") && project.hasProperty("capabilities")) {
        if (project.hasProperty("sauce")) {
            if (project.hasProperty("extra")) {
                args '-extra', extra, '-suitesPackage', suitesPackage, '-suites', suites, '-capabilities', capabilities, '-parallel', parallelTests, '-sauce'
            } else {
                args '-suitesPackage', suitesPackage, '-suites', suites, '-capabilities', capabilities, '-parallel', parallelTests, '-sauce'
            }
        } else {
            if (project.hasProperty("extra")) {
                args '-extra', extra, '-suitesPackage', suitesPackage, '-suites', suites, '-capabilities', capabilities, '-parallel', parallelTests
            } else {
                args '-suitesPackage', suitesPackage, '-suites', suites, '-capabilities', capabilities, '-parallel', parallelTests
            }
        }
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

